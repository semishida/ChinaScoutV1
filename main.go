package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/bwmarrin/discordgo"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// escapeMarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
func escapeMarkdownV2(text string) string {
	replacer := strings.NewReplacer(
		`_`, `\_`,
		`*`, `\*`,
		`[`, `\[`,
		`]`, `\]`,
		`(`, `\(`,
		`)`, `\)`,
		`~`, `\~`,
		`>`, `\>`,
		`#`, `\#`,
		`+`, `\+`,
		`-`, `\-`,
		`=`, `\=`,
		`|`, `\|`,
		`{`, `\{`,
		`}`, `\}`,
		`.`, `\.`,
		`!`, `\!`,
	)
	return replacer.Replace(text)
}

// downloadFile —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
func downloadFile(url, filepath string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

// sendFileToDiscord –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Discord
func sendFileToDiscord(dg *discordgo.Session, channelID string, filePath string, caption string) error {
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("Failed to open file: %v", err)
	}
	defer file.Close()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é
	if caption != "" {
		_, err = dg.ChannelMessageSend(channelID, caption)
		if err != nil {
			return fmt.Errorf("Failed to send message to Discord: %v", err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
	_, err = dg.ChannelFileSend(channelID, filePath, file)
	if err != nil {
		return fmt.Errorf("Failed to send file to Discord: %v", err)
	}

	return nil
}

// parseChatID –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π Telegram Chat ID –≤ int64
func parseChatID(chatID string) (int64, error) {
	var parsedChatID int64
	_, err := fmt.Sscanf(chatID, "%d", &parsedChatID)
	return parsedChatID, err
}

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	discordToken := os.Getenv("DISCORD_TOKEN")
	telegramToken := os.Getenv("TELEGRAM_TOKEN")
	telegramChatID := os.Getenv("TELEGRAM_CHAT_ID")
	discordChannelID := os.Getenv("DISCORD_CHANNEL_ID")
	adminFilePath := os.Getenv("ADMIN_FILE_PATH")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
	ranking, err := NewRanking(adminFilePath)
	if err != nil {
		log.Fatalf("Failed to initialize ranking: %v", err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
	err = ranking.LoadFromFile("users.json")
	if err != nil {
		log.Printf("Failed to load users from file: %v", err)
	}

	// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go ranking.PeriodicSave("users.json")

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
	go func() {
		sig := <-sigs
		log.Printf("Received signal %s. Saving users to file before shutdown...", sig)
		err := ranking.SaveToFile("users.json")
		if err != nil {
			log.Printf("Failed to save users to file on shutdown: %v", err)
		}
		os.Exit(0)
	}()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	if discordToken == "" || telegramToken == "" || telegramChatID == "" || discordChannelID == "" || adminFilePath == "" {
		log.Fatal("Missing required environment variables")
	}

	chatID, err := parseChatID(telegramChatID)
	if err != nil {
		log.Fatalf("Invalid Telegram Chat ID: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
	tgBot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Fatalf("Failed to initialize Telegram bot: %v", err)
	}
	tgBot.Debug = true
	log.Printf("Authorized on Telegram account %s", tgBot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –±–æ—Ç–∞
	dg, err := discordgo.New("Bot " + discordToken)
	if err != nil {
		log.Fatalf("Failed to initialize Discord bot: %v", err)
	}
	dg.Identify.Intents = discordgo.IntentsGuildMessages | discordgo.IntentMessageContent | discordgo.IntentsGuildVoiceStates

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
	ranking.TrackVoiceActivity(dg)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Discord
	dg.AddHandler(func(s *discordgo.Session, m *discordgo.MessageCreate) {
		log.Println("Discord message handler triggered.")
		if m.Author.ID == s.State.User.ID {
			return
		}
		if m.ChannelID != discordChannelID {
			return
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		log.Printf("Received message: %s from %s", m.Content, m.Author.Username)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if strings.HasPrefix(m.Content, "!") {
			if strings.HasPrefix(m.Content, "!china") {
				ranking.HandleChinaCommand(s, m, m.Content)
				return
			}

			if m.Content == "!top5" {
				topUsers := ranking.GetTop5()
				if len(topUsers) == 0 {
					s.ChannelMessageSend(m.ChannelID, "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ö—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
					return
				}
				response := "–¢–æ–ø-5 –∂–∏—Ç–µ–ª–µ–π –ö–∏—Ç–∞—è:\n"
				for i, user := range topUsers {
					response += fmt.Sprintf("%d. <@%s> - %d –æ—á–∫–æ–≤\n", i+1, user.ID, user.Rating)
				}
				s.ChannelMessageSend(m.ChannelID, response)
				return
			}

			if strings.HasPrefix(m.Content, "!rating") {
				parts := strings.Fields(m.Content)
				if len(parts) < 2 {
					s.ChannelMessageSend(m.ChannelID, "‚ùå –ì–ª—É–ø—ã–π –ö–∏—Ç–∞–π—Å–∫–∏–π –∂–∏—Ç–µ–ª—å! –í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∏–º–µ—Ä: !rating @username")
					return
				}
				userID := strings.TrimPrefix(parts[1], "<@")
				userID = strings.TrimSuffix(userID, ">") // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ >
				// –£–¥–∞–ª–µ–Ω–∏–µ '!' –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
				userID = strings.TrimPrefix(userID, "!")
				rating := ranking.GetRating(userID)
				s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∂–∏—Ç–µ–ª—è –ö–∏—Ç–∞—è <@%s>: %d –±–∞–ª–ª–æ–≤", userID, rating))
				return
			}
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram (–µ—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
		if m.Content != "" {
			escapedContent := escapeMarkdownV2(m.Content)
			escapedUsername := escapeMarkdownV2(m.Author.Username)
			telegramMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üéß:\n*%s*: %s", escapedUsername, escapedContent))
			telegramMsg.ParseMode = "MarkdownV2"
			if _, err := tgBot.Send(telegramMsg); err != nil {
				log.Printf("Failed to send message to Telegram: %v", err)
			}
		}

		if len(m.Attachments) > 0 {
			for _, attachment := range m.Attachments {
				if strings.HasPrefix(attachment.ContentType, "image/") {
					photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(attachment.URL))
					photo.Caption = fmt.Sprintf("üéß:\n %s", m.Author.Username)
					if _, err := tgBot.Send(photo); err != nil {
						log.Printf("Failed to send image to Telegram: %v", err)
					}
				}
			}
		}
	})

	// –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞
	if err := dg.Open(); err != nil {
		log.Fatalf("Failed to open Discord session: %v", err)
	}
	defer dg.Close()
	log.Println("Discord bot is running.")

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram (—ç—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	updates := tgBot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.Message == nil || update.Message.Chat.ID != chatID {
			continue
		}

		// 1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Discord
		if update.Message.Text != "" {
			telegramMsg := fmt.Sprintf("‚û§ \n**%s**: %s", update.Message.From.UserName, update.Message.Text)
			_, err := dg.ChannelMessageSend(discordChannelID, telegramMsg)
			if err != nil {
				log.Printf("Failed to send text message to Discord: %v", err)
			}
		}

		// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		if len(update.Message.Photo) > 0 {
			photoFileID := update.Message.Photo[len(update.Message.Photo)-1].FileID
			fileURL, err := tgBot.GetFileDirectURL(photoFileID)
			if err != nil {
				log.Printf("Failed to get photo URL: %v", err)
				continue
			}

			photoPath := fmt.Sprintf("content/photo_%d.jpg", time.Now().UnixNano())

			// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
			err = downloadFile(fileURL, photoPath)
			if err != nil {
				log.Printf("Failed to download photo: %v", err)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Discord
			err = sendFileToDiscord(dg, discordChannelID, photoPath, fmt.Sprintf("‚û§ %s:", update.Message.From.UserName))
			if err != nil {
				log.Printf("Failed to send photo to Discord: %v", err)
			}

			// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
			err = os.Remove(photoPath)
			if err != nil {
				log.Printf("Failed to remove photo file: %v", err)
			}
		}

		// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
		if update.Message.VideoNote != nil {
			// –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
			videoFileID := update.Message.VideoNote.FileID
			fileURL, err := tgBot.GetFileDirectURL(videoFileID)
			if err != nil {
				log.Printf("Failed to get video URL: %v", err)
				continue
			}

			// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∏–¥–µ–æ
			videoPath := fmt.Sprintf("content/video_%d.mp4", time.Now().UnixNano())

			// –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
			err = downloadFile(fileURL, videoPath)
			if err != nil {
				log.Printf("Failed to download video: %v", err)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Discord
			err = sendFileToDiscord(dg, discordChannelID, videoPath, fmt.Sprintf("‚û§ %s:", update.Message.From.UserName))
			if err != nil {
				log.Printf("Failed to send video to Discord: %v", err)
			}

			// –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
			err = os.Remove(videoPath)
			if err != nil {
				log.Printf("Failed to remove video file: %v", err)
			}
		}

		// 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
		if update.Message.Voice != nil {
			voiceFileID := update.Message.Voice.FileID
			fileURL, err := tgBot.GetFileDirectURL(voiceFileID)
			if err != nil {
				log.Printf("Failed to get voice message URL: %v", err)
				continue
			}

			// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			voicePath := fmt.Sprintf("content/voice_%d.ogg", time.Now().UnixNano())

			// –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			err = downloadFile(fileURL, voicePath)
			if err != nil {
				log.Printf("Failed to download voice message: %v", err)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Discord
			err = sendFileToDiscord(dg, discordChannelID, voicePath, fmt.Sprintf("‚û§ %s:", update.Message.From.UserName))
			if err != nil {
				log.Printf("Failed to send voice to Discord: %v", err)
			}

			// –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
			err = os.Remove(voicePath)
			if err != nil {
				log.Printf("Failed to remove voice file: %v", err)
			}
		}
	}
}
